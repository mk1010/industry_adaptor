// Code generated by protoc-gen-go. DO NOT EDIT.
// source: NC-Link.proto

package nclink

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

import (
	"github.com/apache/dubbo-go/protocol"
	dgrpc "github.com/apache/dubbo-go/protocol/grpc"
	"github.com/apache/dubbo-go/protocol/invocation"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DataKind int32

const (
	DataKind_Invalid    DataKind = 0
	DataKind_Bool       DataKind = 1
	DataKind_Int8       DataKind = 2
	DataKind_Int16      DataKind = 3
	DataKind_Int32      DataKind = 4
	DataKind_Int64      DataKind = 5
	DataKind_Uint       DataKind = 6
	DataKind_Uint8      DataKind = 7
	DataKind_Uint16     DataKind = 8
	DataKind_Uint32     DataKind = 9
	DataKind_Uint64     DataKind = 10
	DataKind_Float32    DataKind = 11
	DataKind_Float64    DataKind = 12
	DataKind_Complex64  DataKind = 13
	DataKind_Complex128 DataKind = 14
	DataKind_String     DataKind = 15
)

var DataKind_name = map[int32]string{
	0:  "Invalid",
	1:  "Bool",
	2:  "Int8",
	3:  "Int16",
	4:  "Int32",
	5:  "Int64",
	6:  "Uint",
	7:  "Uint8",
	8:  "Uint16",
	9:  "Uint32",
	10: "Uint64",
	11: "Float32",
	12: "Float64",
	13: "Complex64",
	14: "Complex128",
	15: "String",
}

var DataKind_value = map[string]int32{
	"Invalid":    0,
	"Bool":       1,
	"Int8":       2,
	"Int16":      3,
	"Int32":      4,
	"Int64":      5,
	"Uint":       6,
	"Uint8":      7,
	"Uint16":     8,
	"Uint32":     9,
	"Uint64":     10,
	"Float32":    11,
	"Float64":    12,
	"Complex64":  13,
	"Complex128": 14,
	"String":     15,
}

func (x DataKind) String() string {
	return proto.EnumName(DataKind_name, int32(x))
}

func (DataKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bcf64de72183dbd0, []int{0}
}

type AdaptorMessageKind int32

const (
	AdaptorMessageKind_SetMeta AdaptorMessageKind = 0
	AdaptorMessageKind_GetMeta AdaptorMessageKind = 1
)

var AdaptorMessageKind_name = map[int32]string{
	0: "SetMeta",
	1: "GetMeta",
}

var AdaptorMessageKind_value = map[string]int32{
	"SetMeta": 0,
	"GetMeta": 1,
}

func (x AdaptorMessageKind) String() string {
	return proto.EnumName(AdaptorMessageKind_name, int32(x))
}

func (AdaptorMessageKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bcf64de72183dbd0, []int{1}
}

type NCLinkTopicSub struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	AdaptorId            string   `protobuf:"bytes,2,opt,name=adaptor_id,json=adaptorId,proto3" json:"adaptor_id,omitempty"`
	Tags                 []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NCLinkTopicSub) Reset()         { *m = NCLinkTopicSub{} }
func (m *NCLinkTopicSub) String() string { return proto.CompactTextString(m) }
func (*NCLinkTopicSub) ProtoMessage()    {}
func (*NCLinkTopicSub) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcf64de72183dbd0, []int{0}
}

func (m *NCLinkTopicSub) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NCLinkTopicSub.Unmarshal(m, b)
}
func (m *NCLinkTopicSub) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NCLinkTopicSub.Marshal(b, m, deterministic)
}
func (m *NCLinkTopicSub) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NCLinkTopicSub.Merge(m, src)
}
func (m *NCLinkTopicSub) XXX_Size() int {
	return xxx_messageInfo_NCLinkTopicSub.Size(m)
}
func (m *NCLinkTopicSub) XXX_DiscardUnknown() {
	xxx_messageInfo_NCLinkTopicSub.DiscardUnknown(m)
}

var xxx_messageInfo_NCLinkTopicSub proto.InternalMessageInfo

func (m *NCLinkTopicSub) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *NCLinkTopicSub) GetAdaptorId() string {
	if m != nil {
		return m.AdaptorId
	}
	return ""
}

func (m *NCLinkTopicSub) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type NCLinkTopicMessage struct {
	MessageKind          int32           `protobuf:"varint,1,opt,name=message_kind,json=messageKind,proto3" json:"message_kind,omitempty"`
	Payload              *NCLinkPayloads `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NCLinkTopicMessage) Reset()         { *m = NCLinkTopicMessage{} }
func (m *NCLinkTopicMessage) String() string { return proto.CompactTextString(m) }
func (*NCLinkTopicMessage) ProtoMessage()    {}
func (*NCLinkTopicMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcf64de72183dbd0, []int{1}
}

func (m *NCLinkTopicMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NCLinkTopicMessage.Unmarshal(m, b)
}
func (m *NCLinkTopicMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NCLinkTopicMessage.Marshal(b, m, deterministic)
}
func (m *NCLinkTopicMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NCLinkTopicMessage.Merge(m, src)
}
func (m *NCLinkTopicMessage) XXX_Size() int {
	return xxx_messageInfo_NCLinkTopicMessage.Size(m)
}
func (m *NCLinkTopicMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NCLinkTopicMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NCLinkTopicMessage proto.InternalMessageInfo

func (m *NCLinkTopicMessage) GetMessageKind() int32 {
	if m != nil {
		return m.MessageKind
	}
	return 0
}

func (m *NCLinkTopicMessage) GetPayload() *NCLinkPayloads {
	if m != nil {
		return m.Payload
	}
	return nil
}

type NCLinkAuthReq struct {
	LogicId              string   `protobuf:"bytes,1,opt,name=logic_id,json=logicId,proto3" json:"logic_id,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NCLinkAuthReq) Reset()         { *m = NCLinkAuthReq{} }
func (m *NCLinkAuthReq) String() string { return proto.CompactTextString(m) }
func (*NCLinkAuthReq) ProtoMessage()    {}
func (*NCLinkAuthReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcf64de72183dbd0, []int{2}
}

func (m *NCLinkAuthReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NCLinkAuthReq.Unmarshal(m, b)
}
func (m *NCLinkAuthReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NCLinkAuthReq.Marshal(b, m, deterministic)
}
func (m *NCLinkAuthReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NCLinkAuthReq.Merge(m, src)
}
func (m *NCLinkAuthReq) XXX_Size() int {
	return xxx_messageInfo_NCLinkAuthReq.Size(m)
}
func (m *NCLinkAuthReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NCLinkAuthReq.DiscardUnknown(m)
}

var xxx_messageInfo_NCLinkAuthReq proto.InternalMessageInfo

func (m *NCLinkAuthReq) GetLogicId() string {
	if m != nil {
		return m.LogicId
	}
	return ""
}

func (m *NCLinkAuthReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type NCLinkAuthResp struct {
	BaseResp             *NCLinkBaseResp `protobuf:"bytes,1,opt,name=base_resp,json=baseResp,proto3" json:"base_resp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NCLinkAuthResp) Reset()         { *m = NCLinkAuthResp{} }
func (m *NCLinkAuthResp) String() string { return proto.CompactTextString(m) }
func (*NCLinkAuthResp) ProtoMessage()    {}
func (*NCLinkAuthResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcf64de72183dbd0, []int{3}
}

func (m *NCLinkAuthResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NCLinkAuthResp.Unmarshal(m, b)
}
func (m *NCLinkAuthResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NCLinkAuthResp.Marshal(b, m, deterministic)
}
func (m *NCLinkAuthResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NCLinkAuthResp.Merge(m, src)
}
func (m *NCLinkAuthResp) XXX_Size() int {
	return xxx_messageInfo_NCLinkAuthResp.Size(m)
}
func (m *NCLinkAuthResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NCLinkAuthResp.DiscardUnknown(m)
}

var xxx_messageInfo_NCLinkAuthResp proto.InternalMessageInfo

func (m *NCLinkAuthResp) GetBaseResp() *NCLinkBaseResp {
	if m != nil {
		return m.BaseResp
	}
	return nil
}

type NCLinkBaseResp struct {
	StatusCode           uint32   `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Detail               string   `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NCLinkBaseResp) Reset()         { *m = NCLinkBaseResp{} }
func (m *NCLinkBaseResp) String() string { return proto.CompactTextString(m) }
func (*NCLinkBaseResp) ProtoMessage()    {}
func (*NCLinkBaseResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcf64de72183dbd0, []int{4}
}

func (m *NCLinkBaseResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NCLinkBaseResp.Unmarshal(m, b)
}
func (m *NCLinkBaseResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NCLinkBaseResp.Marshal(b, m, deterministic)
}
func (m *NCLinkBaseResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NCLinkBaseResp.Merge(m, src)
}
func (m *NCLinkBaseResp) XXX_Size() int {
	return xxx_messageInfo_NCLinkBaseResp.Size(m)
}
func (m *NCLinkBaseResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NCLinkBaseResp.DiscardUnknown(m)
}

var xxx_messageInfo_NCLinkBaseResp proto.InternalMessageInfo

func (m *NCLinkBaseResp) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *NCLinkBaseResp) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

type NCLinkDataMessage struct {
	DataId               string            `protobuf:"bytes,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	AdaptorId            string            `protobuf:"bytes,2,opt,name=adaptor_id,json=adaptorId,proto3" json:"adaptor_id,omitempty"`
	DeviceId             string            `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	ComponentId          string            `protobuf:"bytes,4,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	DataItemId           string            `protobuf:"bytes,5,opt,name=data_item_id,json=dataItemId,proto3" json:"data_item_id,omitempty"`
	Payloads             []*NCLinkPayloads `protobuf:"bytes,6,rep,name=payloads,proto3" json:"payloads,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NCLinkDataMessage) Reset()         { *m = NCLinkDataMessage{} }
func (m *NCLinkDataMessage) String() string { return proto.CompactTextString(m) }
func (*NCLinkDataMessage) ProtoMessage()    {}
func (*NCLinkDataMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcf64de72183dbd0, []int{5}
}

func (m *NCLinkDataMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NCLinkDataMessage.Unmarshal(m, b)
}
func (m *NCLinkDataMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NCLinkDataMessage.Marshal(b, m, deterministic)
}
func (m *NCLinkDataMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NCLinkDataMessage.Merge(m, src)
}
func (m *NCLinkDataMessage) XXX_Size() int {
	return xxx_messageInfo_NCLinkDataMessage.Size(m)
}
func (m *NCLinkDataMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NCLinkDataMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NCLinkDataMessage proto.InternalMessageInfo

func (m *NCLinkDataMessage) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

func (m *NCLinkDataMessage) GetAdaptorId() string {
	if m != nil {
		return m.AdaptorId
	}
	return ""
}

func (m *NCLinkDataMessage) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *NCLinkDataMessage) GetComponentId() string {
	if m != nil {
		return m.ComponentId
	}
	return ""
}

func (m *NCLinkDataMessage) GetDataItemId() string {
	if m != nil {
		return m.DataItemId
	}
	return ""
}

func (m *NCLinkDataMessage) GetPayloads() []*NCLinkPayloads {
	if m != nil {
		return m.Payloads
	}
	return nil
}

type NCLinkPayloads struct {
	UnixTimeMs           int64    `protobuf:"varint,1,opt,name=unix_time_ms,json=unixTimeMs,proto3" json:"unix_time_ms,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NCLinkPayloads) Reset()         { *m = NCLinkPayloads{} }
func (m *NCLinkPayloads) String() string { return proto.CompactTextString(m) }
func (*NCLinkPayloads) ProtoMessage()    {}
func (*NCLinkPayloads) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcf64de72183dbd0, []int{6}
}

func (m *NCLinkPayloads) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NCLinkPayloads.Unmarshal(m, b)
}
func (m *NCLinkPayloads) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NCLinkPayloads.Marshal(b, m, deterministic)
}
func (m *NCLinkPayloads) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NCLinkPayloads.Merge(m, src)
}
func (m *NCLinkPayloads) XXX_Size() int {
	return xxx_messageInfo_NCLinkPayloads.Size(m)
}
func (m *NCLinkPayloads) XXX_DiscardUnknown() {
	xxx_messageInfo_NCLinkPayloads.DiscardUnknown(m)
}

var xxx_messageInfo_NCLinkPayloads proto.InternalMessageInfo

func (m *NCLinkPayloads) GetUnixTimeMs() int64 {
	if m != nil {
		return m.UnixTimeMs
	}
	return 0
}

func (m *NCLinkPayloads) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type NCLinkMetaDataReq struct {
	AdaptorId            []string `protobuf:"bytes,1,rep,name=adaptor_id,json=adaptorId,proto3" json:"adaptor_id,omitempty"`
	DeviceId             []string `protobuf:"bytes,2,rep,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	ComponentId          []string `protobuf:"bytes,3,rep,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	DataItemId           []string `protobuf:"bytes,4,rep,name=data_item_id,json=dataItemId,proto3" json:"data_item_id,omitempty"`
	SampleInfoId         []string `protobuf:"bytes,5,rep,name=sample_info_id,json=sampleInfoId,proto3" json:"sample_info_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NCLinkMetaDataReq) Reset()         { *m = NCLinkMetaDataReq{} }
func (m *NCLinkMetaDataReq) String() string { return proto.CompactTextString(m) }
func (*NCLinkMetaDataReq) ProtoMessage()    {}
func (*NCLinkMetaDataReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcf64de72183dbd0, []int{7}
}

func (m *NCLinkMetaDataReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NCLinkMetaDataReq.Unmarshal(m, b)
}
func (m *NCLinkMetaDataReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NCLinkMetaDataReq.Marshal(b, m, deterministic)
}
func (m *NCLinkMetaDataReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NCLinkMetaDataReq.Merge(m, src)
}
func (m *NCLinkMetaDataReq) XXX_Size() int {
	return xxx_messageInfo_NCLinkMetaDataReq.Size(m)
}
func (m *NCLinkMetaDataReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NCLinkMetaDataReq.DiscardUnknown(m)
}

var xxx_messageInfo_NCLinkMetaDataReq proto.InternalMessageInfo

func (m *NCLinkMetaDataReq) GetAdaptorId() []string {
	if m != nil {
		return m.AdaptorId
	}
	return nil
}

func (m *NCLinkMetaDataReq) GetDeviceId() []string {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (m *NCLinkMetaDataReq) GetComponentId() []string {
	if m != nil {
		return m.ComponentId
	}
	return nil
}

func (m *NCLinkMetaDataReq) GetDataItemId() []string {
	if m != nil {
		return m.DataItemId
	}
	return nil
}

func (m *NCLinkMetaDataReq) GetSampleInfoId() []string {
	if m != nil {
		return m.SampleInfoId
	}
	return nil
}

type NCLinkMetaDataResp struct {
	Adaptors             []*NCLinkAdaptor    `protobuf:"bytes,1,rep,name=adaptors,proto3" json:"adaptors,omitempty"`
	Devices              []*NCLinkDevice     `protobuf:"bytes,2,rep,name=devices,proto3" json:"devices,omitempty"`
	Components           []*NCLinkComponent  `protobuf:"bytes,3,rep,name=components,proto3" json:"components,omitempty"`
	DataItems            []*NCLinkDataItem   `protobuf:"bytes,4,rep,name=data_items,json=dataItems,proto3" json:"data_items,omitempty"`
	SampleInfos          []*NCLinkSampleInfo `protobuf:"bytes,5,rep,name=sample_infos,json=sampleInfos,proto3" json:"sample_infos,omitempty"`
	BaseResp             *NCLinkBaseResp     `protobuf:"bytes,6,opt,name=base_resp,json=baseResp,proto3" json:"base_resp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NCLinkMetaDataResp) Reset()         { *m = NCLinkMetaDataResp{} }
func (m *NCLinkMetaDataResp) String() string { return proto.CompactTextString(m) }
func (*NCLinkMetaDataResp) ProtoMessage()    {}
func (*NCLinkMetaDataResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcf64de72183dbd0, []int{8}
}

func (m *NCLinkMetaDataResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NCLinkMetaDataResp.Unmarshal(m, b)
}
func (m *NCLinkMetaDataResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NCLinkMetaDataResp.Marshal(b, m, deterministic)
}
func (m *NCLinkMetaDataResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NCLinkMetaDataResp.Merge(m, src)
}
func (m *NCLinkMetaDataResp) XXX_Size() int {
	return xxx_messageInfo_NCLinkMetaDataResp.Size(m)
}
func (m *NCLinkMetaDataResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NCLinkMetaDataResp.DiscardUnknown(m)
}

var xxx_messageInfo_NCLinkMetaDataResp proto.InternalMessageInfo

func (m *NCLinkMetaDataResp) GetAdaptors() []*NCLinkAdaptor {
	if m != nil {
		return m.Adaptors
	}
	return nil
}

func (m *NCLinkMetaDataResp) GetDevices() []*NCLinkDevice {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *NCLinkMetaDataResp) GetComponents() []*NCLinkComponent {
	if m != nil {
		return m.Components
	}
	return nil
}

func (m *NCLinkMetaDataResp) GetDataItems() []*NCLinkDataItem {
	if m != nil {
		return m.DataItems
	}
	return nil
}

func (m *NCLinkMetaDataResp) GetSampleInfos() []*NCLinkSampleInfo {
	if m != nil {
		return m.SampleInfos
	}
	return nil
}

func (m *NCLinkMetaDataResp) GetBaseResp() *NCLinkBaseResp {
	if m != nil {
		return m.BaseResp
	}
	return nil
}

//元数据描述，由IDL定义进行参考
type NCLinkAdaptor struct {
	AdaptorId            string   `protobuf:"bytes,1,opt,name=adaptor_id,json=adaptorId,proto3" json:"adaptor_id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AdaptorType          string   `protobuf:"bytes,3,opt,name=adaptor_type,json=adaptorType,proto3" json:"adaptor_type,omitempty"`
	Description          string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	DeviceId             []string `protobuf:"bytes,5,rep,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Config               []byte   `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NCLinkAdaptor) Reset()         { *m = NCLinkAdaptor{} }
func (m *NCLinkAdaptor) String() string { return proto.CompactTextString(m) }
func (*NCLinkAdaptor) ProtoMessage()    {}
func (*NCLinkAdaptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcf64de72183dbd0, []int{9}
}

func (m *NCLinkAdaptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NCLinkAdaptor.Unmarshal(m, b)
}
func (m *NCLinkAdaptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NCLinkAdaptor.Marshal(b, m, deterministic)
}
func (m *NCLinkAdaptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NCLinkAdaptor.Merge(m, src)
}
func (m *NCLinkAdaptor) XXX_Size() int {
	return xxx_messageInfo_NCLinkAdaptor.Size(m)
}
func (m *NCLinkAdaptor) XXX_DiscardUnknown() {
	xxx_messageInfo_NCLinkAdaptor.DiscardUnknown(m)
}

var xxx_messageInfo_NCLinkAdaptor proto.InternalMessageInfo

func (m *NCLinkAdaptor) GetAdaptorId() string {
	if m != nil {
		return m.AdaptorId
	}
	return ""
}

func (m *NCLinkAdaptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NCLinkAdaptor) GetAdaptorType() string {
	if m != nil {
		return m.AdaptorType
	}
	return ""
}

func (m *NCLinkAdaptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NCLinkAdaptor) GetDeviceId() []string {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (m *NCLinkAdaptor) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

type NCLinkDevice struct {
	DeviceId             string   `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DeviceType           string   `protobuf:"bytes,3,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	Description          string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	DeviceGroup          string   `protobuf:"bytes,5,opt,name=device_group,json=deviceGroup,proto3" json:"device_group,omitempty"`
	ComponentId          []string `protobuf:"bytes,6,rep,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	Config               []byte   `protobuf:"bytes,7,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NCLinkDevice) Reset()         { *m = NCLinkDevice{} }
func (m *NCLinkDevice) String() string { return proto.CompactTextString(m) }
func (*NCLinkDevice) ProtoMessage()    {}
func (*NCLinkDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcf64de72183dbd0, []int{10}
}

func (m *NCLinkDevice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NCLinkDevice.Unmarshal(m, b)
}
func (m *NCLinkDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NCLinkDevice.Marshal(b, m, deterministic)
}
func (m *NCLinkDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NCLinkDevice.Merge(m, src)
}
func (m *NCLinkDevice) XXX_Size() int {
	return xxx_messageInfo_NCLinkDevice.Size(m)
}
func (m *NCLinkDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_NCLinkDevice.DiscardUnknown(m)
}

var xxx_messageInfo_NCLinkDevice proto.InternalMessageInfo

func (m *NCLinkDevice) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *NCLinkDevice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NCLinkDevice) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *NCLinkDevice) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NCLinkDevice) GetDeviceGroup() string {
	if m != nil {
		return m.DeviceGroup
	}
	return ""
}

func (m *NCLinkDevice) GetComponentId() []string {
	if m != nil {
		return m.ComponentId
	}
	return nil
}

func (m *NCLinkDevice) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

type NCLinkComponent struct {
	ComponentId          string            `protobuf:"bytes,1,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	Name                 string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ComponentType        string            `protobuf:"bytes,3,opt,name=component_type,json=componentType,proto3" json:"component_type,omitempty"`
	Description          string            `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Config               []byte            `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	DataInfo             []*NCLinkDataInfo `protobuf:"bytes,6,rep,name=data_info,json=dataInfo,proto3" json:"data_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NCLinkComponent) Reset()         { *m = NCLinkComponent{} }
func (m *NCLinkComponent) String() string { return proto.CompactTextString(m) }
func (*NCLinkComponent) ProtoMessage()    {}
func (*NCLinkComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcf64de72183dbd0, []int{11}
}

func (m *NCLinkComponent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NCLinkComponent.Unmarshal(m, b)
}
func (m *NCLinkComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NCLinkComponent.Marshal(b, m, deterministic)
}
func (m *NCLinkComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NCLinkComponent.Merge(m, src)
}
func (m *NCLinkComponent) XXX_Size() int {
	return xxx_messageInfo_NCLinkComponent.Size(m)
}
func (m *NCLinkComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_NCLinkComponent.DiscardUnknown(m)
}

var xxx_messageInfo_NCLinkComponent proto.InternalMessageInfo

func (m *NCLinkComponent) GetComponentId() string {
	if m != nil {
		return m.ComponentId
	}
	return ""
}

func (m *NCLinkComponent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NCLinkComponent) GetComponentType() string {
	if m != nil {
		return m.ComponentType
	}
	return ""
}

func (m *NCLinkComponent) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NCLinkComponent) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *NCLinkComponent) GetDataInfo() []*NCLinkDataInfo {
	if m != nil {
		return m.DataInfo
	}
	return nil
}

type NCLinkDataInfo struct {
	DataItem             *NCLinkDataItem   `protobuf:"bytes,1,opt,name=data_item,json=dataItem,proto3" json:"data_item,omitempty"`
	SampleInfo           *NCLinkSampleInfo `protobuf:"bytes,2,opt,name=sample_info,json=sampleInfo,proto3" json:"sample_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NCLinkDataInfo) Reset()         { *m = NCLinkDataInfo{} }
func (m *NCLinkDataInfo) String() string { return proto.CompactTextString(m) }
func (*NCLinkDataInfo) ProtoMessage()    {}
func (*NCLinkDataInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcf64de72183dbd0, []int{12}
}

func (m *NCLinkDataInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NCLinkDataInfo.Unmarshal(m, b)
}
func (m *NCLinkDataInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NCLinkDataInfo.Marshal(b, m, deterministic)
}
func (m *NCLinkDataInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NCLinkDataInfo.Merge(m, src)
}
func (m *NCLinkDataInfo) XXX_Size() int {
	return xxx_messageInfo_NCLinkDataInfo.Size(m)
}
func (m *NCLinkDataInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NCLinkDataInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NCLinkDataInfo proto.InternalMessageInfo

func (m *NCLinkDataInfo) GetDataItem() *NCLinkDataItem {
	if m != nil {
		return m.DataItem
	}
	return nil
}

func (m *NCLinkDataInfo) GetSampleInfo() *NCLinkSampleInfo {
	if m != nil {
		return m.SampleInfo
	}
	return nil
}

type NCLinkDataItem struct {
	DataItemId           string               `protobuf:"bytes,1,opt,name=data_item_id,json=dataItemId,proto3" json:"data_item_id,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DataItemType         string               `protobuf:"bytes,3,opt,name=data_item_type,json=dataItemType,proto3" json:"data_item_type,omitempty"`
	Description          string               `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Items                []*NCLinkDataItemMin `protobuf:"bytes,5,rep,name=items,proto3" json:"items,omitempty"`
	DataUnit             map[string]string    `protobuf:"bytes,6,rep,name=data_unit,json=dataUnit,proto3" json:"data_unit,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NCLinkDataItem) Reset()         { *m = NCLinkDataItem{} }
func (m *NCLinkDataItem) String() string { return proto.CompactTextString(m) }
func (*NCLinkDataItem) ProtoMessage()    {}
func (*NCLinkDataItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcf64de72183dbd0, []int{13}
}

func (m *NCLinkDataItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NCLinkDataItem.Unmarshal(m, b)
}
func (m *NCLinkDataItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NCLinkDataItem.Marshal(b, m, deterministic)
}
func (m *NCLinkDataItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NCLinkDataItem.Merge(m, src)
}
func (m *NCLinkDataItem) XXX_Size() int {
	return xxx_messageInfo_NCLinkDataItem.Size(m)
}
func (m *NCLinkDataItem) XXX_DiscardUnknown() {
	xxx_messageInfo_NCLinkDataItem.DiscardUnknown(m)
}

var xxx_messageInfo_NCLinkDataItem proto.InternalMessageInfo

func (m *NCLinkDataItem) GetDataItemId() string {
	if m != nil {
		return m.DataItemId
	}
	return ""
}

func (m *NCLinkDataItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NCLinkDataItem) GetDataItemType() string {
	if m != nil {
		return m.DataItemType
	}
	return ""
}

func (m *NCLinkDataItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NCLinkDataItem) GetItems() []*NCLinkDataItemMin {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *NCLinkDataItem) GetDataUnit() map[string]string {
	if m != nil {
		return m.DataUnit
	}
	return nil
}

type NCLinkDataItemMin struct {
	FiledName            string   `protobuf:"bytes,1,opt,name=filed_name,json=filedName,proto3" json:"filed_name,omitempty"`
	Kind                 DataKind `protobuf:"varint,2,opt,name=kind,proto3,enum=nclink.DataKind" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NCLinkDataItemMin) Reset()         { *m = NCLinkDataItemMin{} }
func (m *NCLinkDataItemMin) String() string { return proto.CompactTextString(m) }
func (*NCLinkDataItemMin) ProtoMessage()    {}
func (*NCLinkDataItemMin) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcf64de72183dbd0, []int{14}
}

func (m *NCLinkDataItemMin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NCLinkDataItemMin.Unmarshal(m, b)
}
func (m *NCLinkDataItemMin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NCLinkDataItemMin.Marshal(b, m, deterministic)
}
func (m *NCLinkDataItemMin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NCLinkDataItemMin.Merge(m, src)
}
func (m *NCLinkDataItemMin) XXX_Size() int {
	return xxx_messageInfo_NCLinkDataItemMin.Size(m)
}
func (m *NCLinkDataItemMin) XXX_DiscardUnknown() {
	xxx_messageInfo_NCLinkDataItemMin.DiscardUnknown(m)
}

var xxx_messageInfo_NCLinkDataItemMin proto.InternalMessageInfo

func (m *NCLinkDataItemMin) GetFiledName() string {
	if m != nil {
		return m.FiledName
	}
	return ""
}

func (m *NCLinkDataItemMin) GetKind() DataKind {
	if m != nil {
		return m.Kind
	}
	return DataKind_Invalid
}

type NCLinkSampleInfo struct {
	SampleInfoId         string   `protobuf:"bytes,1,opt,name=sample_info_id,json=sampleInfoId,proto3" json:"sample_info_id,omitempty"`
	SampleInfoType       string   `protobuf:"bytes,2,opt,name=sample_info_type,json=sampleInfoType,proto3" json:"sample_info_type,omitempty"`
	SamplingPeriod       uint32   `protobuf:"varint,3,opt,name=sampling_period,json=samplingPeriod,proto3" json:"sampling_period,omitempty"`
	UploadPeriod         uint32   `protobuf:"varint,4,opt,name=upload_period,json=uploadPeriod,proto3" json:"upload_period,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NCLinkSampleInfo) Reset()         { *m = NCLinkSampleInfo{} }
func (m *NCLinkSampleInfo) String() string { return proto.CompactTextString(m) }
func (*NCLinkSampleInfo) ProtoMessage()    {}
func (*NCLinkSampleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcf64de72183dbd0, []int{15}
}

func (m *NCLinkSampleInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NCLinkSampleInfo.Unmarshal(m, b)
}
func (m *NCLinkSampleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NCLinkSampleInfo.Marshal(b, m, deterministic)
}
func (m *NCLinkSampleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NCLinkSampleInfo.Merge(m, src)
}
func (m *NCLinkSampleInfo) XXX_Size() int {
	return xxx_messageInfo_NCLinkSampleInfo.Size(m)
}
func (m *NCLinkSampleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NCLinkSampleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NCLinkSampleInfo proto.InternalMessageInfo

func (m *NCLinkSampleInfo) GetSampleInfoId() string {
	if m != nil {
		return m.SampleInfoId
	}
	return ""
}

func (m *NCLinkSampleInfo) GetSampleInfoType() string {
	if m != nil {
		return m.SampleInfoType
	}
	return ""
}

func (m *NCLinkSampleInfo) GetSamplingPeriod() uint32 {
	if m != nil {
		return m.SamplingPeriod
	}
	return 0
}

func (m *NCLinkSampleInfo) GetUploadPeriod() uint32 {
	if m != nil {
		return m.UploadPeriod
	}
	return 0
}

func init() {
	proto.RegisterEnum("nclink.DataKind", DataKind_name, DataKind_value)
	proto.RegisterEnum("nclink.AdaptorMessageKind", AdaptorMessageKind_name, AdaptorMessageKind_value)
	proto.RegisterType((*NCLinkTopicSub)(nil), "nclink.NCLinkTopicSub")
	proto.RegisterType((*NCLinkTopicMessage)(nil), "nclink.NCLinkTopicMessage")
	proto.RegisterType((*NCLinkAuthReq)(nil), "nclink.NCLinkAuthReq")
	proto.RegisterType((*NCLinkAuthResp)(nil), "nclink.NCLinkAuthResp")
	proto.RegisterType((*NCLinkBaseResp)(nil), "nclink.NCLinkBaseResp")
	proto.RegisterType((*NCLinkDataMessage)(nil), "nclink.NCLinkDataMessage")
	proto.RegisterType((*NCLinkPayloads)(nil), "nclink.NCLinkPayloads")
	proto.RegisterType((*NCLinkMetaDataReq)(nil), "nclink.NCLinkMetaDataReq")
	proto.RegisterType((*NCLinkMetaDataResp)(nil), "nclink.NCLinkMetaDataResp")
	proto.RegisterType((*NCLinkAdaptor)(nil), "nclink.NCLinkAdaptor")
	proto.RegisterType((*NCLinkDevice)(nil), "nclink.NCLinkDevice")
	proto.RegisterType((*NCLinkComponent)(nil), "nclink.NCLinkComponent")
	proto.RegisterType((*NCLinkDataInfo)(nil), "nclink.NCLinkDataInfo")
	proto.RegisterType((*NCLinkDataItem)(nil), "nclink.NCLinkDataItem")
	proto.RegisterMapType((map[string]string)(nil), "nclink.NCLinkDataItem.DataUnitEntry")
	proto.RegisterType((*NCLinkDataItemMin)(nil), "nclink.NCLinkDataItemMin")
	proto.RegisterType((*NCLinkSampleInfo)(nil), "nclink.NCLinkSampleInfo")
}

func init() { proto.RegisterFile("NC-Link.proto", fileDescriptor_bcf64de72183dbd0) }

var fileDescriptor_bcf64de72183dbd0 = []byte{
	// 1240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x57, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0xde, 0xf1, 0xbf, 0x6b, 0x6c, 0xef, 0x6c, 0x13, 0xb2, 0x5e, 0x23, 0xb4, 0xd9, 0x21, 0x88,
	0x68, 0x25, 0x42, 0xe2, 0x04, 0x13, 0xc8, 0x29, 0x3f, 0xbb, 0xd1, 0x88, 0x4d, 0xb4, 0x1a, 0x67,
	0x0f, 0x7b, 0xb2, 0xc6, 0x9e, 0x8e, 0x69, 0xc5, 0xee, 0x19, 0xdc, 0xed, 0xb0, 0xb9, 0xf1, 0x48,
	0x9c, 0x11, 0x12, 0x0f, 0xc0, 0x13, 0x70, 0x41, 0xf0, 0x00, 0xbc, 0x03, 0xea, 0xbf, 0xf9, 0xb1,
	0x9d, 0x90, 0x5b, 0x75, 0x55, 0x75, 0x4d, 0x7d, 0x5f, 0x57, 0x55, 0xf7, 0x40, 0xf3, 0xe2, 0xe4,
	0xcb, 0x37, 0x84, 0x5e, 0x6f, 0xc7, 0xb3, 0x88, 0x47, 0xa8, 0x42, 0x47, 0x13, 0x42, 0xaf, 0xdd,
	0xf7, 0xd0, 0xba, 0x38, 0x11, 0xfa, 0xcb, 0x28, 0x26, 0xa3, 0xfe, 0x7c, 0x88, 0xd6, 0xa0, 0xcc,
	0x85, 0xdc, 0xb6, 0x36, 0xac, 0xad, 0xba, 0xaf, 0x16, 0xe8, 0x53, 0x80, 0x20, 0x0c, 0x62, 0x1e,
	0xcd, 0x06, 0x24, 0x6c, 0x17, 0xa4, 0xa9, 0xae, 0x35, 0x5e, 0x88, 0x10, 0x94, 0x78, 0x30, 0x66,
	0xed, 0xe2, 0x46, 0x71, 0xab, 0xee, 0x4b, 0xd9, 0x25, 0x80, 0x32, 0xa1, 0xcf, 0x31, 0x63, 0xc1,
	0x18, 0xa3, 0x17, 0xd0, 0x98, 0x2a, 0x71, 0x70, 0x4d, 0x68, 0x28, 0xbf, 0x52, 0xf6, 0x6d, 0xad,
	0xfb, 0x9e, 0xd0, 0x10, 0xed, 0x40, 0x35, 0x0e, 0x6e, 0x27, 0x51, 0xa0, 0x3e, 0x64, 0x77, 0xd7,
	0xb7, 0x55, 0xb6, 0xdb, 0x2a, 0xde, 0x5b, 0x65, 0x64, 0xbe, 0x71, 0x73, 0x5f, 0x0b, 0x78, 0xc2,
	0x74, 0x34, 0xe7, 0x3f, 0xf8, 0xf8, 0x47, 0xf4, 0x0c, 0x6a, 0x93, 0x68, 0x4c, 0x46, 0x22, 0x59,
	0x85, 0xa3, 0x2a, 0xd7, 0x5e, 0x88, 0x3a, 0x50, 0x8b, 0x03, 0xc6, 0x7e, 0x8a, 0x66, 0x06, 0x47,
	0xb2, 0x76, 0x5f, 0x19, 0x36, 0x54, 0x1c, 0x16, 0xa3, 0x3d, 0xa8, 0x0f, 0x03, 0x86, 0x07, 0x33,
	0xcc, 0x62, 0x19, 0x69, 0x29, 0x9b, 0xe3, 0x80, 0x61, 0xe1, 0xea, 0xd7, 0x86, 0x5a, 0x72, 0x3d,
	0x13, 0xc6, 0xd8, 0xd0, 0x73, 0xb0, 0x19, 0x0f, 0xf8, 0x9c, 0x0d, 0x46, 0x51, 0x88, 0x65, 0xa0,
	0xa6, 0x0f, 0x4a, 0x75, 0x12, 0x85, 0x18, 0xad, 0x43, 0x25, 0xc4, 0x3c, 0x20, 0x13, 0x9d, 0x93,
	0x5e, 0xb9, 0xff, 0x58, 0xf0, 0x44, 0xc5, 0x3a, 0x0d, 0x78, 0x60, 0x48, 0x7c, 0x0a, 0xd5, 0x30,
	0xe0, 0x41, 0x8a, 0xae, 0x22, 0x96, 0x5e, 0xf8, 0x7f, 0xc7, 0xf4, 0x09, 0xd4, 0x43, 0x7c, 0x43,
	0x46, 0x58, 0x58, 0x8b, 0x0a, 0xbc, 0x52, 0x78, 0xa1, 0x38, 0x99, 0x51, 0x34, 0x8d, 0x23, 0x8a,
	0x29, 0x17, 0xf6, 0x92, 0xb4, 0xdb, 0x89, 0xce, 0x0b, 0xd1, 0x06, 0x34, 0xd4, 0x77, 0x39, 0x9e,
	0x0a, 0x97, 0xb2, 0x74, 0x01, 0xf9, 0x71, 0x8e, 0xa7, 0x5e, 0x88, 0xba, 0x82, 0x5d, 0x75, 0x3c,
	0xed, 0xca, 0x46, 0xf1, 0x9e, 0xc3, 0x4b, 0xfc, 0xdc, 0x37, 0x86, 0x2e, 0x63, 0x13, 0xdf, 0x99,
	0x53, 0xf2, 0x61, 0xc0, 0xc9, 0x14, 0x0f, 0xa6, 0x4c, 0x82, 0x2c, 0xfa, 0x20, 0x74, 0x97, 0x64,
	0x8a, 0xcf, 0x19, 0x6a, 0xe7, 0x6b, 0xa4, 0x91, 0xd6, 0xc2, 0xaf, 0x09, 0x63, 0xe7, 0x98, 0x07,
	0x82, 0x35, 0x51, 0x10, 0x79, 0x62, 0x2c, 0x59, 0xa6, 0x77, 0x11, 0x53, 0x90, 0xd6, 0xbb, 0x89,
	0x51, 0x45, 0x7e, 0x2f, 0x31, 0x25, 0xe9, 0x92, 0x25, 0x66, 0x13, 0x5a, 0x2c, 0x98, 0xc6, 0x13,
	0x3c, 0x20, 0xf4, 0x2a, 0x52, 0xe4, 0x09, 0x9f, 0x86, 0xd2, 0x7a, 0xf4, 0x2a, 0xf2, 0x42, 0xf7,
	0xcf, 0x82, 0x69, 0x9a, 0x34, 0x79, 0x16, 0xa3, 0x5d, 0xa8, 0xe9, 0x5c, 0x99, 0xcc, 0xdd, 0xee,
	0x7e, 0x9c, 0x67, 0xf5, 0x48, 0x59, 0xfd, 0xc4, 0x0d, 0x6d, 0x43, 0x55, 0x01, 0x60, 0x12, 0x8f,
	0xdd, 0x5d, 0xcb, 0xef, 0x38, 0x95, 0x46, 0xdf, 0x38, 0xa1, 0x6f, 0x00, 0x12, 0x40, 0xaa, 0x8f,
	0xed, 0xee, 0xd3, 0xfc, 0x96, 0x13, 0x63, 0xf7, 0x33, 0xae, 0xe8, 0x6b, 0x80, 0x04, 0x3a, 0x93,
	0xc0, 0x97, 0xce, 0xfc, 0x54, 0xd3, 0xe0, 0xd7, 0x0d, 0x21, 0x0c, 0x1d, 0x42, 0x23, 0xc3, 0x07,
	0x93, 0x6c, 0xd8, 0xdd, 0x76, 0x7e, 0x63, 0x3f, 0xe1, 0xc6, 0xb7, 0x53, 0x9e, 0x58, 0xbe, 0x2b,
	0x2b, 0x0f, 0xec, 0xca, 0xdf, 0xac, 0x64, 0x4a, 0x28, 0x92, 0x96, 0x8a, 0x62, 0x79, 0xa8, 0xd1,
	0x60, 0x8a, 0x75, 0x1b, 0x49, 0x59, 0xd4, 0x82, 0xd9, 0xc2, 0x6f, 0x63, 0xac, 0x9b, 0xc8, 0xd6,
	0xba, 0xcb, 0xdb, 0x18, 0xa3, 0x0d, 0xb0, 0x43, 0xcc, 0x46, 0x33, 0x12, 0x73, 0x12, 0x51, 0xd3,
	0x46, 0x19, 0x55, 0xbe, 0xda, 0xca, 0x0b, 0xd5, 0xb6, 0x0e, 0x95, 0x51, 0x44, 0xaf, 0xc8, 0x58,
	0x02, 0x6b, 0xf8, 0x7a, 0xe5, 0xfe, 0x6d, 0x41, 0x23, 0x7b, 0x74, 0xf9, 0x28, 0xd6, 0x42, 0x33,
	0xaf, 0xca, 0xfd, 0xb9, 0x48, 0x4c, 0x6e, 0xc8, 0xa4, 0x0e, 0x4a, 0xf5, 0xc0, 0xcc, 0x5f, 0x40,
	0x43, 0x87, 0x18, 0xcf, 0xa2, 0x79, 0xac, 0x07, 0x80, 0x0e, 0x7b, 0x26, 0x54, 0x4b, 0xdd, 0x52,
	0x59, 0xee, 0x96, 0x14, 0x62, 0x35, 0x07, 0xf1, 0x2f, 0x0b, 0x1e, 0x2f, 0x94, 0xda, 0x52, 0x38,
	0x6b, 0x79, 0x2a, 0xad, 0xc2, 0xfa, 0x39, 0xb4, 0xd2, 0x6d, 0x19, 0xb8, 0xcd, 0x44, 0xfb, 0x40,
	0xc4, 0x69, 0xae, 0xe5, 0x6c, 0xae, 0xa2, 0x04, 0x55, 0xd9, 0xd3, 0xab, 0x68, 0xf5, 0xa4, 0x93,
	0x55, 0x2f, 0x4a, 0xb7, 0x16, 0x6a, 0xc9, 0xfd, 0xd9, 0x32, 0xa3, 0xce, 0x18, 0xd3, 0x38, 0x1c,
	0x4f, 0x57, 0x5f, 0x30, 0x49, 0xf7, 0xd4, 0x4c, 0xf7, 0xa0, 0x6f, 0xc1, 0xce, 0x34, 0x8f, 0xbe,
	0x25, 0xef, 0xee, 0x1d, 0x48, 0x7b, 0xc7, 0xfd, 0xbd, 0x90, 0x4b, 0x41, 0x44, 0x5b, 0x1c, 0x5e,
	0xd6, 0xd2, 0x54, 0x5f, 0xc5, 0xf0, 0x26, 0xb4, 0xd2, 0x5d, 0x19, 0x86, 0x1b, 0x66, 0xdf, 0x03,
	0x09, 0xfe, 0x0a, 0xca, 0x6a, 0x74, 0xa8, 0x09, 0xf0, 0x6c, 0x35, 0xf8, 0x73, 0x42, 0x7d, 0xe5,
	0x87, 0x8e, 0x34, 0x63, 0x73, 0x4a, 0xb8, 0x66, 0x7e, 0x73, 0xf5, 0xa6, 0x6d, 0x21, 0xbc, 0xa3,
	0x84, 0xbf, 0xa2, 0x7c, 0x76, 0xab, 0xf8, 0x13, 0xcb, 0xce, 0x21, 0x34, 0x73, 0x26, 0xe4, 0x40,
	0xf1, 0x1a, 0xdf, 0x6a, 0xe4, 0x42, 0x14, 0xcf, 0xa0, 0x9b, 0x60, 0x32, 0x37, 0x98, 0xd5, 0xe2,
	0xbb, 0xc2, 0x81, 0xe5, 0xbe, 0xcf, 0xde, 0xc8, 0x3a, 0x37, 0x31, 0x4a, 0xae, 0xc8, 0x04, 0x87,
	0x03, 0xc9, 0x93, 0x1e, 0x25, 0x52, 0x73, 0xa1, 0xca, 0xb1, 0x24, 0x5f, 0x3b, 0x22, 0x58, 0xab,
	0xfb, 0xc4, 0xa4, 0x2b, 0x71, 0x08, 0x83, 0x2f, 0xcd, 0xee, 0x2f, 0x16, 0x38, 0x8b, 0xa7, 0xb7,
	0xe2, 0xe6, 0x50, 0xe1, 0x73, 0x37, 0x07, 0xda, 0x02, 0x27, 0xeb, 0x25, 0x0f, 0x44, 0xa5, 0xde,
	0x4a, 0xfd, 0xe4, 0x91, 0x7c, 0x01, 0x8f, 0xa5, 0x86, 0xd0, 0xf1, 0x20, 0xc6, 0x33, 0x12, 0xa9,
	0xa7, 0x40, 0x53, 0x3b, 0x12, 0x3a, 0x7e, 0x2b, 0xb5, 0xe8, 0x33, 0x68, 0xce, 0x63, 0x71, 0xa7,
	0x1a, 0xb7, 0x92, 0x74, 0x6b, 0x28, 0xa5, 0x72, 0x7a, 0xf9, 0x87, 0xa5, 0x8f, 0x43, 0x00, 0x40,
	0x36, 0x54, 0x3d, 0x7a, 0x13, 0x4c, 0x48, 0xe8, 0x3c, 0x42, 0x35, 0x28, 0x1d, 0x47, 0xd1, 0xc4,
	0xb1, 0x84, 0xe4, 0x51, 0x7e, 0xe0, 0x14, 0x50, 0x1d, 0xca, 0x1e, 0xe5, 0xbb, 0x3d, 0xa7, 0xa8,
	0xc5, 0xbd, 0xae, 0x53, 0xd2, 0x62, 0x6f, 0xdf, 0x29, 0x0b, 0xd7, 0x77, 0x84, 0x72, 0xa7, 0x22,
	0x94, 0x42, 0x3a, 0x70, 0xaa, 0x08, 0xa0, 0x22, 0xc4, 0xdd, 0x9e, 0x53, 0x33, 0xf2, 0x5e, 0xd7,
	0xa9, 0x1b, 0xb9, 0xb7, 0xef, 0x80, 0xf8, 0xf4, 0xeb, 0x49, 0x14, 0x08, 0x83, 0x9d, 0x2c, 0x7a,
	0xfb, 0x4e, 0x03, 0x35, 0xa1, 0x2e, 0xe6, 0xc9, 0x04, 0x7f, 0xe8, 0xed, 0x3b, 0x4d, 0xd4, 0x02,
	0xd0, 0xcb, 0xdd, 0xee, 0x81, 0xd3, 0x12, 0x41, 0xfa, 0x7c, 0x46, 0xe8, 0xd8, 0x79, 0xfc, 0x72,
	0x07, 0xd6, 0xcc, 0x78, 0xcf, 0xbe, 0x52, 0x45, 0xbc, 0x3e, 0xe6, 0xe2, 0x4e, 0x76, 0x1e, 0x89,
	0xc5, 0x99, 0x5e, 0x58, 0xdd, 0x7f, 0x0b, 0xe6, 0x56, 0xe9, 0xe3, 0x99, 0x9c, 0xcb, 0x87, 0x00,
	0xe9, 0x23, 0x12, 0x2d, 0x5e, 0xd4, 0xea, 0x81, 0xda, 0x59, 0x5f, 0xa5, 0x66, 0x31, 0x3a, 0x33,
	0x13, 0xb0, 0x3f, 0x1f, 0x8a, 0x1e, 0x19, 0x62, 0xb4, 0xe0, 0x6a, 0x1e, 0xea, 0x9d, 0xce, 0x0a,
	0xbd, 0x7e, 0x20, 0xee, 0x58, 0xe8, 0xc4, 0xb4, 0x79, 0x1f, 0xd3, 0x50, 0x54, 0x2a, 0x5a, 0xd1,
	0x59, 0xda, 0xbd, 0x73, 0xc7, 0xe5, 0x89, 0x3c, 0xf8, 0x28, 0x0d, 0x72, 0x1c, 0x30, 0x32, 0x92,
	0x91, 0xee, 0xf9, 0xf2, 0x9d, 0xa1, 0x92, 0x27, 0xba, 0xa6, 0x6e, 0x31, 0x9d, 0xcc, 0x63, 0x6d,
	0x11, 0x59, 0xf6, 0x29, 0x34, 0xac, 0xc8, 0xff, 0x97, 0xbd, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x18, 0xa4, 0x38, 0x78, 0xd0, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NCLinkServiceClient is the client API for NCLinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NCLinkServiceClient interface {
	NCLinkAuth(ctx context.Context, in *NCLinkAuthReq, opts ...grpc.CallOption) (*NCLinkAuthResp, error)
	NCLinkSubscribe(ctx context.Context, in *NCLinkTopicSub, opts ...grpc.CallOption) (NCLinkService_NCLinkSubscribeClient, error)
	NCLinkSendData(ctx context.Context, in *NCLinkDataMessage, opts ...grpc.CallOption) (*NCLinkBaseResp, error)
	NCLinkSendBasicData(ctx context.Context, in *NCLinkTopicMessage, opts ...grpc.CallOption) (*NCLinkBaseResp, error)
	NCLinkGetMeta(ctx context.Context, in *NCLinkMetaDataReq, opts ...grpc.CallOption) (*NCLinkMetaDataResp, error)
}

type nCLinkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNCLinkServiceClient(cc grpc.ClientConnInterface) NCLinkServiceClient {
	return &nCLinkServiceClient{cc}
}

func (c *nCLinkServiceClient) NCLinkAuth(ctx context.Context, in *NCLinkAuthReq, opts ...grpc.CallOption) (*NCLinkAuthResp, error) {
	out := new(NCLinkAuthResp)
	err := c.cc.Invoke(ctx, "/nclink.NCLinkService/NCLinkAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nCLinkServiceClient) NCLinkSubscribe(ctx context.Context, in *NCLinkTopicSub, opts ...grpc.CallOption) (NCLinkService_NCLinkSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NCLinkService_serviceDesc.Streams[0], "/nclink.NCLinkService/NCLinkSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &nCLinkServiceNCLinkSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NCLinkService_NCLinkSubscribeClient interface {
	Recv() (*NCLinkTopicMessage, error)
	grpc.ClientStream
}

type nCLinkServiceNCLinkSubscribeClient struct {
	grpc.ClientStream
}

func (x *nCLinkServiceNCLinkSubscribeClient) Recv() (*NCLinkTopicMessage, error) {
	m := new(NCLinkTopicMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nCLinkServiceClient) NCLinkSendData(ctx context.Context, in *NCLinkDataMessage, opts ...grpc.CallOption) (*NCLinkBaseResp, error) {
	out := new(NCLinkBaseResp)
	err := c.cc.Invoke(ctx, "/nclink.NCLinkService/NCLinkSendData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nCLinkServiceClient) NCLinkSendBasicData(ctx context.Context, in *NCLinkTopicMessage, opts ...grpc.CallOption) (*NCLinkBaseResp, error) {
	out := new(NCLinkBaseResp)
	err := c.cc.Invoke(ctx, "/nclink.NCLinkService/NCLinkSendBasicData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nCLinkServiceClient) NCLinkGetMeta(ctx context.Context, in *NCLinkMetaDataReq, opts ...grpc.CallOption) (*NCLinkMetaDataResp, error) {
	out := new(NCLinkMetaDataResp)
	err := c.cc.Invoke(ctx, "/nclink.NCLinkService/NCLinkGetMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NCLinkServiceServer is the server API for NCLinkService service.
type NCLinkServiceServer interface {
	NCLinkAuth(context.Context, *NCLinkAuthReq) (*NCLinkAuthResp, error)
	NCLinkSubscribe(*NCLinkTopicSub, NCLinkService_NCLinkSubscribeServer) error
	NCLinkSendData(context.Context, *NCLinkDataMessage) (*NCLinkBaseResp, error)
	NCLinkSendBasicData(context.Context, *NCLinkTopicMessage) (*NCLinkBaseResp, error)
	NCLinkGetMeta(context.Context, *NCLinkMetaDataReq) (*NCLinkMetaDataResp, error)
}

// UnimplementedNCLinkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNCLinkServiceServer struct {
}

func (*UnimplementedNCLinkServiceServer) NCLinkAuth(ctx context.Context, req *NCLinkAuthReq) (*NCLinkAuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NCLinkAuth not implemented")
}
func (*UnimplementedNCLinkServiceServer) NCLinkSubscribe(req *NCLinkTopicSub, srv NCLinkService_NCLinkSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method NCLinkSubscribe not implemented")
}
func (*UnimplementedNCLinkServiceServer) NCLinkSendData(ctx context.Context, req *NCLinkDataMessage) (*NCLinkBaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NCLinkSendData not implemented")
}
func (*UnimplementedNCLinkServiceServer) NCLinkSendBasicData(ctx context.Context, req *NCLinkTopicMessage) (*NCLinkBaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NCLinkSendBasicData not implemented")
}
func (*UnimplementedNCLinkServiceServer) NCLinkGetMeta(ctx context.Context, req *NCLinkMetaDataReq) (*NCLinkMetaDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NCLinkGetMeta not implemented")
}

func RegisterNCLinkServiceServer(s *grpc.Server, srv NCLinkServiceServer) {
	s.RegisterService(&_NCLinkService_serviceDesc, srv)
}

func _NCLinkService_NCLinkAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NCLinkAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NCLinkServiceServer).NCLinkAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nclink.NCLinkService/NCLinkAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NCLinkServiceServer).NCLinkAuth(ctx, req.(*NCLinkAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NCLinkService_NCLinkSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NCLinkTopicSub)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NCLinkServiceServer).NCLinkSubscribe(m, &nCLinkServiceNCLinkSubscribeServer{stream})
}

type NCLinkService_NCLinkSubscribeServer interface {
	Send(*NCLinkTopicMessage) error
	grpc.ServerStream
}

type nCLinkServiceNCLinkSubscribeServer struct {
	grpc.ServerStream
}

func (x *nCLinkServiceNCLinkSubscribeServer) Send(m *NCLinkTopicMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _NCLinkService_NCLinkSendData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NCLinkDataMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NCLinkServiceServer).NCLinkSendData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nclink.NCLinkService/NCLinkSendData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NCLinkServiceServer).NCLinkSendData(ctx, req.(*NCLinkDataMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _NCLinkService_NCLinkSendBasicData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NCLinkTopicMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NCLinkServiceServer).NCLinkSendBasicData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nclink.NCLinkService/NCLinkSendBasicData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NCLinkServiceServer).NCLinkSendBasicData(ctx, req.(*NCLinkTopicMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _NCLinkService_NCLinkGetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NCLinkMetaDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NCLinkServiceServer).NCLinkGetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nclink.NCLinkService/NCLinkGetMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NCLinkServiceServer).NCLinkGetMeta(ctx, req.(*NCLinkMetaDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _NCLinkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nclink.NCLinkService",
	HandlerType: (*NCLinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NCLinkAuth",
			Handler:    _NCLinkService_NCLinkAuth_Handler,
		},
		{
			MethodName: "NCLinkSendData",
			Handler:    _NCLinkService_NCLinkSendData_Handler,
		},
		{
			MethodName: "NCLinkSendBasicData",
			Handler:    _NCLinkService_NCLinkSendBasicData_Handler,
		},
		{
			MethodName: "NCLinkGetMeta",
			Handler:    _NCLinkService_NCLinkGetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NCLinkSubscribe",
			Handler:       _NCLinkService_NCLinkSubscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "NC-Link.proto",
}

// NCLinkServiceClientImpl is the client API for NCLinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NCLinkServiceClientImpl struct {
	NCLinkAuth          func(ctx context.Context, in *NCLinkAuthReq, out *NCLinkAuthResp) error
	NCLinkSubscribe     func(ctx context.Context, in *NCLinkTopicSub) (NCLinkService_NCLinkSubscribeClient, error)
	NCLinkSendData      func(ctx context.Context, in *NCLinkDataMessage, out *NCLinkBaseResp) error
	NCLinkSendBasicData func(ctx context.Context, in *NCLinkTopicMessage, out *NCLinkBaseResp) error
	NCLinkGetMeta       func(ctx context.Context, in *NCLinkMetaDataReq, out *NCLinkMetaDataResp) error
}

func (c *NCLinkServiceClientImpl) Reference() string {
	return "nCLinkServiceImpl"
}

func (c *NCLinkServiceClientImpl) GetDubboStub(cc *grpc.ClientConn) NCLinkServiceClient {
	return NewNCLinkServiceClient(cc)
}

type NCLinkServiceProviderBase struct {
	proxyImpl protocol.Invoker
}

func (s *NCLinkServiceProviderBase) SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *NCLinkServiceProviderBase) GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func _DUBBO_NCLinkService_NCLinkAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NCLinkAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dgrpc.DubboGrpcService)
	args := []interface{}{}
	args = append(args, in)
	invo := invocation.NewRPCInvocation("NCLinkAuth", args, nil)
	if interceptor == nil {
		result := base.GetProxyImpl().Invoke(context.Background(), invo)
		return result.Result(), result.Error()
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nclink.NCLinkService/NCLinkAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.GetProxyImpl().Invoke(context.Background(), invo)
		return result.Result(), result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _DUBBO_NCLinkService_NCLinkSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	_, ok := srv.(dgrpc.DubboGrpcService)
	invo := invocation.NewRPCInvocation("NCLinkSubscribe", nil, nil)
	if !ok {
		fmt.Println(invo)
	}
	m := new(NCLinkTopicSub)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NCLinkServiceServer).NCLinkSubscribe(m, &nCLinkServiceNCLinkSubscribeServer{stream})
}

func _DUBBO_NCLinkService_NCLinkSendData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NCLinkDataMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dgrpc.DubboGrpcService)
	args := []interface{}{}
	args = append(args, in)
	invo := invocation.NewRPCInvocation("NCLinkSendData", args, nil)
	if interceptor == nil {
		result := base.GetProxyImpl().Invoke(context.Background(), invo)
		return result.Result(), result.Error()
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nclink.NCLinkService/NCLinkSendData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.GetProxyImpl().Invoke(context.Background(), invo)
		return result.Result(), result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _DUBBO_NCLinkService_NCLinkSendBasicData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NCLinkTopicMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dgrpc.DubboGrpcService)
	args := []interface{}{}
	args = append(args, in)
	invo := invocation.NewRPCInvocation("NCLinkSendBasicData", args, nil)
	if interceptor == nil {
		result := base.GetProxyImpl().Invoke(context.Background(), invo)
		return result.Result(), result.Error()
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nclink.NCLinkService/NCLinkSendBasicData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.GetProxyImpl().Invoke(context.Background(), invo)
		return result.Result(), result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _DUBBO_NCLinkService_NCLinkGetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NCLinkMetaDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dgrpc.DubboGrpcService)
	args := []interface{}{}
	args = append(args, in)
	invo := invocation.NewRPCInvocation("NCLinkGetMeta", args, nil)
	if interceptor == nil {
		result := base.GetProxyImpl().Invoke(context.Background(), invo)
		return result.Result(), result.Error()
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nclink.NCLinkService/NCLinkGetMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.GetProxyImpl().Invoke(context.Background(), invo)
		return result.Result(), result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func (s *NCLinkServiceProviderBase) ServiceDesc() *grpc.ServiceDesc {
	return &grpc.ServiceDesc{
		ServiceName: "nclink.NCLinkService",
		HandlerType: (*NCLinkServiceServer)(nil),
		Methods: []grpc.MethodDesc{
			{
				MethodName: "NCLinkAuth",
				Handler:    _DUBBO_NCLinkService_NCLinkAuth_Handler,
			},
			{
				MethodName: "NCLinkSendData",
				Handler:    _DUBBO_NCLinkService_NCLinkSendData_Handler,
			},
			{
				MethodName: "NCLinkSendBasicData",
				Handler:    _DUBBO_NCLinkService_NCLinkSendBasicData_Handler,
			},
			{
				MethodName: "NCLinkGetMeta",
				Handler:    _DUBBO_NCLinkService_NCLinkGetMeta_Handler,
			},
		},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "NCLinkSubscribe",
				Handler:       _DUBBO_NCLinkService_NCLinkSubscribe_Handler,
				ServerStreams: true,
			},
		},
		Metadata: "NC-Link.proto",
	}
}
